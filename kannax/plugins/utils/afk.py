""" setup AFK mode """

import asyncio
import time
from random import choice, randint

from kannax import Config, Message, filters, get_collection, kannax
from kannax.utils import time_formatter

CHANNEL = kannax.getCLogger(__name__)
SAVED_SETTINGS = get_collection("CONFIGS")
AFK_COLLECTION = get_collection("AFK")

IS_AFK = False
IS_AFK_FILTER = filters.create(lambda _, __, ___: bool(IS_AFK))
REASON = ""
TIME = 0.0
USERS = {}


async def _init() -> None:
    global IS_AFK, REASON, TIME  # pylint: disable=global-statement
    data = await SAVED_SETTINGS.find_one({"_id": "AFK"})
    if data:
        IS_AFK = data["on"]
        REASON = data["data"]
        TIME = data["time"] if "time" in data else 0
    async for _user in AFK_COLLECTION.find():
        USERS.update({_user["_id"]: [_user["pcount"], _user["gcount"], _user["men"]]})


@kannax.on_cmd(
    "afk",
    about={
        "header": "Definir para o modo AFK",
        "description": "Define seu status como AFK. Responde a qualquer pessoa que te marcar/PM's.\n"
        "Desliga o AFK quando voc√™ digita alguma coisa.",
        "usage": "{tr}afk or {tr}afk [motivo]",
    },
    allow_channels=False,
)
async def active_afk(message: Message) -> None:
    """turn on or off afk mode"""
    global REASON, IS_AFK, TIME  # pylint: disable=global-statement
    IS_AFK = True
    TIME = time.time()
    REASON = message.input_str
    await asyncio.gather(
        CHANNEL.log(f"Ficando AFK! : `{REASON}`"),
        message.edit("`Ficando AFK!`", del_in=1),
        AFK_COLLECTION.drop(),
        SAVED_SETTINGS.update_one(
            {"_id": "AFK"},
            {"$set": {"on": True, "data": REASON, "time": TIME}},
            upsert=True,
        ),
    )


@kannax.on_filters(
    IS_AFK_FILTER
    & ~filters.me
    & ~filters.bot
    & ~filters.user(Config.TG_IDS)
    & ~filters.edited
    & (
        filters.mentioned
        | (
            filters.private
            & ~filters.service
            & (
                filters.create(lambda _, __, ___: Config.ALLOW_ALL_PMS)
                | Config.ALLOWED_CHATS
            )
        )
    ),
    allow_via_bot=False,
)
async def handle_afk_incomming(message: Message) -> None:
    """handle incomming messages when you afk"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    chat = message.chat
    user_dict = await message.client.get_user_dict(user_id)
    afk_time = time_formatter(round(time.time() - TIME))
    coro_list = []
    if user_id in USERS:
        if not (USERS[user_id][0] + USERS[user_id][1]) % randint(2, 4):
            if REASON:
                out_str = (
                f"‚ñ∏ Oi, estou **AFK** agora.\n"
                f"‚ñ∏ **Motivo:** <code>{REASON}</code> [\u200c](https://telegra.ph/file/682f8a23615e221dd6e2f.mp4)\n"
                f"‚ñ∏ **Visto por ultimo:** `{afk_time} ago`"
            )
            else:
                out_str = choice(AFK_REASONS)
            coro_list.append(message.reply(out_str))
        if chat.type == "private":
            USERS[user_id][0] += 1
        else:
            USERS[user_id][1] += 1
    else:
        if REASON:
            out_str = (
                f"‚ñ∏ Oi, estou **AFK** agora.\n"
                f"‚ñ∏ **Motivo:** <code>{REASON}</code> [\u200c](https://telegra.ph/file/682f8a23615e221dd6e2f.mp4)\n"
                f"‚ñ∏ **Visto por ultimo:** `{afk_time} ago`"
            )
        else:
            out_str = choice(AFK_REASONS)
        coro_list.append(message.reply(out_str))
        if chat.type == "private":
            USERS[user_id] = [1, 0, user_dict["mention"]]
        else:
            USERS[user_id] = [0, 1, user_dict["mention"]]
    if chat.type == "private":
        coro_list.append(
            CHANNEL.log(
                f"#PRIVATE\n{user_dict['mention']} te enviou\n\n" f"{message.text}"
            )
        )
    else:
        coro_list.append(
            CHANNEL.log(
                "#GROUP\n"
                f"{user_dict['mention']} marcou voc√™ em [{chat.title}](http://t.me/{chat.username})\n\n"
                f"{message.text}\n\n"
                f"[goto_msg](https://t.me/c/{str(chat.id)[4:]}/{message.message_id})"
            )
        )
    coro_list.append(
        AFK_COLLECTION.update_one(
            {"_id": user_id},
            {
                "$set": {
                    "pcount": USERS[user_id][0],
                    "gcount": USERS[user_id][1],
                    "men": USERS[user_id][2],
                }
            },
            upsert=True,
        )
    )
    await asyncio.gather(*coro_list)


@kannax.on_filters(IS_AFK_FILTER & filters.outgoing, group=-1, allow_via_bot=False)
async def handle_afk_outgoing(message: Message) -> None:
    """handle outgoing messages when you afk"""
    global IS_AFK  # pylint: disable=global-statement
    IS_AFK = False
    afk_time = time_formatter(round(time.time() - TIME))
    replied: Message = await message.reply("`I'm no longer AFK!`", log=__name__)
    coro_list = []
    if USERS:
        p_msg = ""
        g_msg = ""
        p_count = 0
        g_count = 0
        for pcount, gcount, men in USERS.values():
            if pcount:
                p_msg += f"üë§ {men} ‚úâÔ∏è **{pcount}**\n"
                p_count += pcount
            if gcount:
                g_msg += f"üë• {men} ‚úâÔ∏è **{gcount}**\n"
                g_count += gcount
        coro_list.append(
            replied.edit(
                f"`Voc√™ recebeu {p_count + g_count} mensagens enquanto voc√™ estava fora. "
                f"Verifique o log para obter mais detalhes.`\n\n**AFK time** : __{afk_time}__",
                del_in=3,
            )
        )
        out_str = (
            f"Voc√™ recebeu **{p_count + g_count}** mensagens "
            + f"De **{len(USERS)}** usu√°rios enquanto voc√™ estava fora!\n\n**AFK time** : __{afk_time}__\n"
        )
        if p_count:
            out_str += f"\n**{p_count} Mensagens privadas:**\n\n{p_msg}"
        if g_count:
            out_str += f"\n**{g_count} Mensagens de Grupo:**\n\n{g_msg}"
        coro_list.append(CHANNEL.log(out_str))
        USERS.clear()
    else:
        await asyncio.sleep(3)
        coro_list.append(replied.delete())
    coro_list.append(
        asyncio.gather(
            AFK_COLLECTION.drop(),
            SAVED_SETTINGS.update_one(
                {"_id": "AFK"}, {"$set": {"on": False}}, upsert=True
            ),
        )
    )
    await asyncio.gather(*coro_list)


AFK_REASONS = (
    "Agora estou ocupado. Por favor, fale em uma bolsa e quando eu voltar voc√™ pode apenas me dar a bolsa!",
    "Estou fora agora. Se precisar de alguma coisa, deixe mensagem ap√≥s o beep:\n`beeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeep`!",
    "Voc√™ me errou, da pr√≥xima vez mire melhor.",
    "Volto em alguns minutos e se n√£o ..,\nespere mais um pouco.",
    "N√£o estou aqui agora, ent√£o provavelmente estou em outro lugar.",
    "Sei que quer falar comigo, mas estou ocupado salvando o mundo agora.",
    "√Äs vezes, vale a pena esperar pelas melhores coisas da vida‚Ä¶\nJ√° volto.",
    "J√° volto,\nmas se n√£o voltar agora,\nvolto mais tarde.",
    "Se voc√™ ainda n√£o percebeu,\nn√£o estou aqui.",
    "Ol√°, seja bem-vindo √† minha mensagem de aus√™ncia, como posso ignor√°-lo hoje?",
    "Estou mais longe que 7 mares e 7 pa√≠ses,\n7 √°guas e 7 continentes,\n7 montanhas e 7 colinas,\n7 plan√≠cies e 7 montes,\n7 piscinas e 7 lagos,\n7 nascentes e 7 prados,\n7 cidades e 7 bairros,\n7 quadras e 7 casas...\n\nOnde nem mesmo suas mensagens podem me alcan√ßar!",
    "Estou ausente no momento, mas se voc√™ gritar alto o suficiente na tela, talvez eu possa ouvir voc√™.",
    "Por favor, deixe uma mensagem e me fa√ßa sentir ainda mais importante do que j√° sou.",
    "Eu n√£o estou aqui ent√£o pare de escrever para mim,\nou ent√£o voc√™ se ver√° com uma tela cheia de suas pr√≥prias mensagens.",
    "Se eu estivesse aqui,\nEu te diria onde estou.\n\nMas eu n√£o estou,\nent√£o me pergunte quando eu voltar...",
    "Estou ausente!\nN√£o sei quando voltarei!\nEspero que daqui a alguns minutos!",
    "N√£o estou dispon√≠vel agora, por favor, deixe seu nome, n√∫mero e endere√ßo e eu irei persegui-lo mais tarde. ",
    "Desculpe, eu n√£o estou aqui agora.\nSinta-se √† vontade para falar com meu userbot pelo tempo que desejar.\nEu respondo mais tarde.",
    "Aposto que voc√™ estava esperando uma mensagem de aus√™ncia, mas era eu! Dio!",
    "A vida √© t√£o curta, h√° tantas coisas para fazer ...\nEstou ausente fazendo uma delas ..",
    "Eu n√£o estou aqui agora ...\nmas se estivesse...\n\nisso n√£o seria incr√≠vel?",
)
